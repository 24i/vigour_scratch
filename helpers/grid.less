@import url('../mixins/grid.less');

// defining rows
[class^="row"] >,
[class*=" row"] > {
  .clearfix;
  .padding-h(0) !important;
  display: block;

  > li,
  > div,
  > .cell {
    float: left;
    .padding-h(@gap / 2);
    .sizing;

    &.full {
      width: 100% !important;
    }

    // margin goodies
    &.margin {
      &.center {
        float: none;
        .margin-h(auto);
      }
    }
  }

  // refactoring
  &.padding {
    &.twice {
      .twice-padding();
    }

    &.half {
      .half-padding();

      &.more {
        .half-more-padding();
      }
    }

    &.without {
      .no-padding();
    }

    &.edge {
      .no-side-padding();

      &.twice {
        .twice-side-padding();
      }
    }
  }
}


// defining columns quantity per row
.columns (@property: 1){
  > li,
  > div,
  > .cell {
    display: block;
    width: 100% / @property;
    min-height: 1px;

    &.inverse {
      width: 100% - (100% / @property);
    }

    .generate-colspan(@property);
    .generate-colspan(@n, @i: 2) when (@i =< @n) {
      &.cell@{i} {
        width: (100% / @property) * @i;
      }

      .generate-colspan(@n, (@i + 1));
    }

    > [class^="row"],
    > [class*=" row"] {

    }
  }
}


// generating rows
.generate-row(@n, @i: 1) when (@i =< @n) {
  &.row@{i} {
    .columns(@i);
  }
  .generate-row(@n, (@i + 1));
}

.generate-row(@grid-children);


& when (@responsive = true) {
  // > 1680px
  & when (@grid-big-children > 0) {
    @media all and (min-width: @screen-big) {

      [class^="row"], [class*=" row"] {
        &[class^="big"],
        &[class*=" big"] {
          display: block;

          > li,
          > div,
          > .cell {
            float: left;
          }
        }

        .columns (@property: 1){
          > li,
          > div,
          > .cell {
            width: 100% / @property;
            min-height: 1px;

            &.inverse {
              width: 100% - (100% / @property);
            }

            .generate-colspan(@property);
            .generate-colspan(@n, @i: 1) when (@i =< @n) {
              &.big@{i} {
                width: (100% / @property) * @i;
              }

              .generate-colspan(@n, (@i + 1));
            }

            &.big1 {
              display: block;
            }

            &.big0 {
              display: none
            }
          }

          &.big1 {
            display: block
          }
        }

        .generate-row(@n, @i: 1) when (@i =< @n) {
          &.big@{i} {
            .columns(@i);
          }

          .generate-row(@n, (@i + 1));
        }

        .generate-row(@grid-big-children);
      }

    }
  }

  // 1366px
  & when (@grid-medium-children > 0) {
    @media all and (max-width: @screen-medium) {

      [class^="row"], [class*=" row"] {
        &[class^="medium"],
        &[class*=" medium"] {
          display: block;

          > li,
          > div,
          > .cell {
            float: left;
          }
        }

        .columns (@property: 1){
          > li,
          > div,
          > .cell {
            width: 100% / @property;
            min-height: 1px;

            &.inverse {
              width: 100% - (100% / @property);
            }

            .generate-colspan(@property);
            .generate-colspan(@n, @i: 1) when (@i =< @n) {
              &.medium@{i} {
                width: (100% / @property) * @i;
              }

              .generate-colspan(@n, (@i + 1));
            }

            &.medium1 {
              display: block;
            }

            &.medium0 {
              display: none
            }
          }

          &.medium1 {
            display: block
          }
        }

        .generate-row(@n, @i: 1) when (@i =< @n) {
          &.medium@{i} {
            .columns(@i);
          }

          .generate-row(@n, (@i + 1));
        }

        .generate-row(@grid-medium-children);
      }

    }
  }

  // 1280px
  & when (@grid-small-children > 0) {
    @media all and (max-width: @screen-small) {

      [class^="row"], [class*=" row"] {
        &[class^="small"],
        &[class*=" small"] {
          display: block;

          > li,
          > div,
          > .cell {
            float: left;
          }
        }

        .columns (@property: 1){
          > li,
          > div,
          > .cell {
            width: 100% / @property;
            min-height: 1px;

            &.inverse {
              width: 100% - (100% / @property);
            }

            .generate-colspan(@property);
            .generate-colspan(@n, @i: 1) when (@i =< @n) {
              &.small@{i} {
                width: (100% / @property) * @i;
              }

              .generate-colspan(@n, (@i + 1));
            }

            &.small1 {
              display: block;
            }

            &.small0 {
              display: none
            }
          }

          &.small1 {
            display: block
          }
        }

        .generate-row(@n, @i: 1) when (@i =< @n) {
          &.small@{i} {
            .columns(@i);
          }

          .generate-row(@n, (@i + 1));
        }

        .generate-row(@grid-small-children);
      }

    }
  }

  // 960px
  & when (@grid-tiny-children > 0) {
    @media all and (max-width: @screen-tiny) {

      [class^="row"], [class*=" row"] {
        &[class^="tiny"],
        &[class*=" tiny"] {
          display: block;

          > li,
          > div,
          > .cell {
            float: left;
          }
        }

        .columns (@property: 1){
          > li,
          > div,
          > .cell {
            width: 100% / @property;
            min-height: 1px;

            &.inverse {
              width: 100% - (100% / @property);
            }

            .generate-colspan(@property);
            .generate-colspan(@n, @i: 1) when (@i =< @n) {
              &.tiny@{i} {
                width: (100% / @property) * @i;
              }

              .generate-colspan(@n, (@i + 1));
            }

            &.tiny1 {
              display: block;
            }

            &.tiny0 {
              display: none
            }
          }

          &.tiny1 {
            display: block
          }
        }

        .generate-row(@n, @i: 1) when (@i =< @n) {
          &.tiny@{i} {
            .columns(@i);
          }

          .generate-row(@n, (@i + 1));
        }

        .generate-row(@grid-tiny-children);
      }

    }
  }

  // 768px
  & when (@grid-tablet-children > 0) {
    @media all and (max-width: @screen-tablet) {

      [class^="row"], [class*=" row"] {
        &[class^="tablet"],
        &[class*=" tablet"] {
          display: block;

          > li,
          > div,
          > .cell {
            float: left;
          }
        }

        .columns (@property: 1){
          > li,
          > div,
          > .cell {
            width: 100% / @property;
            min-height: 1px;

            &.inverse {
              width: 100% - (100% / @property);
            }

            .generate-colspan(@property);
            .generate-colspan(@n, @i: 1) when (@i =< @n) {
              &.tablet@{i} {
                width: (100% / @property) * @i;
              }

              .generate-colspan(@n, (@i + 1));
            }

            &.tablet1 {
              display: block;
            }

            &.tablet0 {
              display: none
            }
          }

          &.tablet1 {
            display: block
          }
        }

        .generate-row(@n, @i: 1) when (@i =< @n) {
          &.tablet@{i} {
            .columns(@i);
          }

          .generate-row(@n, (@i + 1));
        }

        .generate-row(@grid-tablet-children);
      }

    }
  }

  // 480px
  & when (@grid-mobile-children > 0) {
    @media all and (max-width: @screen-mobile) {

      [class^="row"], [class*=" row"] {
        &[class^="mobile"],
        &[class*=" mobile"] {
          display: block;

          > li,
          > div,
          > .cell {
            float: left;
          }
        }

        .columns (@property: 1){
          > li,
          > div,
          > .cell {
            width: 100% / @property;
            min-height: 1px;

            &.inverse {
              width: 100% - (100% / @property);
            }

            .generate-colspan(@property);
            .generate-colspan(@n, @i: 1) when (@i =< @n) {
              &.mobile@{i} {
                width: (100% / @property) * @i;
              }

              .generate-colspan(@n, (@i + 1));
            }

            &.mobile1 {
              display: block;
            }

            &.mobile0 {
              display: none
            }
          }

          &.mobile1 {
            display: block
          }
        }

        .generate-row(@n, @i: 1) when (@i =< @n) {
          &.mobile@{i} {
            .columns(@i);
          }

          .generate-row(@n, (@i + 1));
        }

        .generate-row(@grid-mobile-children);
      }

    }
  }
}