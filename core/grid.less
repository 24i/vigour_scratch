[class^="row"] >,
[class*=" row"] > {
	display: block;

	&:after {
		content: "";
		clear: both;
		display: block;
		height: 1px;
		float: none;
	}

	& > li,
	& > div:not(.clear),
	& > .cell {
		float: left;
		padding-right: @grid-padding / 2;
		padding-left: @grid-padding / 2;
		.sizing;

		&.full {
			width: 100%;
		}
	}

	&.no-padding {
		& > li,
		& > div:not(.clear),
		& > .cell {
			padding: 0;
		}
	}

	&.side-padding {
		margin-left: -@grid-padding / 2;
		margin-right: -@grid-padding / 2;
	}

	&.twice-padding {
		& > li,
		& > div:not(.clear),
		& > .cell {
			padding-right: @grid-padding * 2;
			padding-left: @grid-padding * 2;
		}

		&.side-padding {
			margin-left: -@grid-padding * 2;
			width: 100%;
			width: calc(~'100% + ' @grid-padding * 4)
		}
	}

	&.no-float {
		font-size: 0;

		& > li,
		& > div:not(.clear),
		& > .cell {
			float: none !important;
			display: inline-block;
			vertical-align: top;
			font-size: @font-size;
		}
	}
}

.columns (@property: 1){
	& > li,
	& > div:not(.clear),
	& > .cell {
		width: 100% / @property;
		min-height: 1px;

		&.inverse {
			width: 100% - (100% / @property);
		}

		&.break {
			.clearfix;
		}

		.generate-colspan(@property);
		.generate-colspan(@n, @i: 2) when (@i =< @n) {
			&.colspan@{i} {
				width: (100% / @property) * @i;
			}

			.generate-colspan(@n, (@i + 1));
		}
	}
}


.generate-row(@n, @i: 1) when (@i =< @n) {
	&.row@{i} {
		.columns(@i)
	}
  .generate-row(@n, (@i + 1));
}

.generate-row(@grid-children);


// 1024px
@media all and (max-width: @tablet) {

	[class^="row"], [class*=" row"] {
		&[class^="tablet"],
		&[class*=" tablet"] {
			& > li,
			& > div:not(.clear),
			& > .cell {
				float: left;
			}
		}

		.generate-row(@n, @i: 1) when (@i =< @n) {
			&.tablet@{i} {
				.columns(@i);
			}

			.generate-row(@n, (@i + 1));
		}

		.generate-row(@grid-children-tablet);
	}

}

// 840px
@media all and (max-width: @small-tablet) {

	[class^="row"], [class*=" row"] {
		&[class^="small-tablet"],
		&[class*=" small-tablet"] {
			& > li,
			& > div:not(.clear),
			& > .cell {
				float: left;
			}
		}

		.generate-row(@n, @i: 1) when (@i =< @n) {
			&.small-tablet@{i} {
				.columns(@i);
			}

			.generate-row(@n, (@i + 1));
		}

		.generate-row(@grid-children-small-tablet);
	}

}

// 728px
@media all and (max-width: @mobile) {

	[class^="row"], [class*=" row"] {
		&[class^="mobile"],
		&[class*=" mobile"] {
			& > li,
			& > div:not(.clear),
			& > .cell {
				float: left;
			}
		}

		.generate-row(@n, @i: 1) when (@i =< @n) {
			&.mobile@{i} {
				.columns(@i);
			}

			.generate-row(@n, (@i + 1));
		}

		.generate-row(@grid-children-mobile);
	}

}

// 480px
@media all and (max-width: @small-mobile) {

	[class^="row"], [class*=" row"] {
		&[class^="small-mobile"],
		&[class*=" small-mobile"] {
			& > li,
			& > div:not(.clear),
			& > .cell {
				float: left;
			}
		}

		.generate-row(@n, @i: 1) when (@i =< @n) {
			&.small-mobile@{i} {
				.columns(@i);
			}

			.generate-row(@n, (@i + 1));
		}

		.generate-row(@grid-children-small-mobile);
	}

}